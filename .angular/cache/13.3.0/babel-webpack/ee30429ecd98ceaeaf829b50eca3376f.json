{"ast":null,"code":"import { RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { AngularFireAuthGuard, redirectUnauthorizedTo, customClaims } from '@angular/fire/compat/auth-guard';\nimport { map } from 'rxjs/operators';\nimport { UsersComponent } from './users/users.component';\nimport { pipe } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\n\nconst redirectUnauthorizedToLogin = () => redirectUnauthorizedTo(['']);\n\nconst redirectLoggedInToProfile = () => map(user => user ? ['profile', user.uid] : true);\n\nconst onlyAllowSelf = next => map(user => !!user && next.params.id == user.uid || ['']);\n\nconst adminOnly = () => pipe(customClaims, map(claims => claims.admin === true || ['']));\n\nconst redirectLoggedInToProfileOrUsers = () => pipe(customClaims, map(claims => {\n  // if no claims, then there is no authenticated user\n  // so alow the route ['']\n  if (claims.length === 0) {\n    return true;\n  } // if a custom claim set, then redirect to ['users']\n\n\n  if (claims.admin) {\n    return ['users'];\n  } // otherwise, redirect user's profile page\n\n\n  return ['profile', claims.user_id];\n}));\n\nconst allowOnlySelfOrAdmin = next => pipe(customClaims, map(claims => {\n  if (claims.length = 0) {\n    return [''];\n  }\n\n  return next.params.id === claims.user_id || claims.admin;\n}));\n\nconst routes = [{\n  path: '',\n  component: LoginComponent,\n  canActivate: [AngularFireAuthGuard],\n  data: {\n    authGuardPipe: redirectLoggedInToProfileOrUsers\n  }\n}, {\n  path: 'profile/:id',\n  component: ProfileComponent,\n  canActivate: [AngularFireAuthGuard],\n  data: {\n    authGuardPipe: allowOnlySelfOrAdmin\n  }\n}, {\n  path: 'users',\n  component: UsersComponent,\n  canActivate: [AngularFireAuthGuard],\n  data: {\n    authGuardPipe: adminOnly\n  }\n}];\nexport let AppRoutingModule = /*#__PURE__*/(() => {\n  class AppRoutingModule {}\n\n  AppRoutingModule.ɵfac = function AppRoutingModule_Factory(t) {\n    return new (t || AppRoutingModule)();\n  };\n\n  AppRoutingModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: AppRoutingModule\n  });\n  AppRoutingModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[RouterModule.forRoot(routes)], RouterModule]\n  });\n  return AppRoutingModule;\n})();","map":null,"metadata":{},"sourceType":"module"}